"Name"     = 'Component/Device Tree IDL'
"Author"   = 'B. Gian James'
"Version"  = '0.1.2.0'
"About"    = 'An IDL akin to linux dtc but optimized for brew/munix.'

"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["\]
{Hex Chars} = [abcdefABCDEF0123456789]
{Bin Chars} = [01]
{Int Chars} = [0123456789]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}
EQ          = '='

Identifier    = {Letter}{AlphaNumeric}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
HexLiteral  = '0x' {Hex Chars}+
BinLiteral = '0b' {Bin Chars}+
DecLiteral = {Int Chars}* '.' {Int Chars}*
IntLiteral = {Int Chars}+
DateLiteral = {Int Chars}+ '/' {Int Chars}+ '/' {Int Chars}+           

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  !Empty
          
<Boolean>   ::= TRUE | FALSE

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program>
           
<Literal>   ::= StringLiteral
             | HexLiteral | BinLiteral | IntLiteral | DecLiteral
             | Identifier
             | <ScopedLiteral>
             
<ScopedLiteral> ::= Identifier ':' Identifier
             
<NumberLiteral> ::= HexLiteral | BinLiteral | IntLiteral | DecLiteral

<Program> ::= <HeaderItems> <nl> <Directives> <nl Opt> <Components> <nl Opt>

<HeaderItems>   ::= <header>
                 | <header> <HeaderItems>
                    
<header>    ::= 'model' StringLiteral
             | 'version' EQ StringLiteral
             | 'date' EQ DateLiteral
             | 'author' EQ StringLiteral
             
<Directives>    ::= <Directive>
                 | <Directive> <Directives>

                 
<Directive> ::= '/memreserve/' HexLiteral HexLiteral <nl>
                 
<Components>    ::= <Component>
                 | <Component> <Components>
                 

<Component> ::= 'components' 'root' EQ StringLiteral '{' <nl Opt> <ComponentBody> '}' <nl Opt>

<ComponentBody> ::= <CPU Component>
                 |<CPU Component> <ComponentBody>
                 | <Localbus Decl> | <Localbus Decl> <ComponentBody>
                 | <ExtMem Layout>
                 | <Peripherals>
                 | <Devices>
 
<ExtMem Layout> ::= <Memory Cache>
                 | <Memory SRAM>
                 | <Memory Flash>
                 | <Memory EEPROM>
                 
<Memory Cache> ::= cache '@' IntLiteral mod EQ Identifier '{' <nl Opt> <Memory Body> '}' <nl Opt>
                
<Memory SRAM>   ::= sram '@' IntLiteral mod EQ Identifier '{' <nl Opt> <Memory Body> '}' <nl Opt>
                 
<Memory Flash>  ::= flash '@' IntLiteral mod EQ Identifier '{' <nl Opt> <Memory Body> '}' <nl Opt>
                 
<Memory EEPROM> ::= eeprom '@' IntLiteral mod EQ Identifier '{' <nl Opt> <Memory Body> '}' <nl Opt>
                
<Memory Body>    ::= type EQ <Memory Type>
                 | mem EQ IntLiteral
                 | start EQ <NumberLiteral>
                 | end EQ <NumberLiteral>
                 | range EQ '[' IntLiteral ',' IntLiteral ']'
                 | 'int' EQ IntLiteral
                 | <AddrBits>
                 | <DataBits>
                 | <IOBits>
                 | 'bus' EQ Identifier
                 | 'bus' EQ '&' Identifier
                 | 'device-node' EQ StringLiteral
                              
<Memory Type>   ::= sram | nor | nand | cache | eeprom
                 
<Peripherals>   ::= peripherals '{'
                 
<Devices>   ::= 'devices' '{'
             
                
<Localbus Decl> ::= 'localbus' 'speed' EQ IntLiteral '{' <nl Opt> <Localbus Body> '}' <nl Opt>
                 
<Localbus Body> ::= <Localbus Body Parts> <nl Opt>
                 | <Localbus Body Parts> <Localbus Body> <nl Opt>
                 
<Localbus Body Parts>   ::= 'protocol' EQ <Localbus Protocol Body>
                    | <AddrBits>
                    | <DataBits>
                    | <IOBits>
                    | 'device-node' EQ StringLiteral
                    | <DataBits> <Localbus Body Parts> <nl Opt>
      
<Localbus Protocol Body>    ::= multiplexed | serial
                             | 'shortbus'
                             | 'munix'
                             | 'video'
                             | parallel
                             
<AddrBits>  ::= 'addr-bits' EQ IntLiteral
             
<DataBits>  ::= 'data-bits' EQ IntLiteral
             
<IOBits>    ::= 'io-bits' EQ IntLiteral
                 
<CPU Component> ::= 'cpu' 'name' EQ StringLiteral 'mmcu' EQ Identifier 'fcpu' EQ IntLiteral '{' <nl Opt> <CPU Body> '}' <nl Opt>
                 | 'cpu' '@' IntLiteral 'mmcu' EQ Identifier 'fcpu' EQ IntLiteral '{' <nl Opt> <CPU Body> '}' <nl Opt>
                 
<CPU Body>  ::= <CPU Body Parts> <nl Opt>
             | <CPU Body Parts> <nl> <CPU Body>
             
<CPU Body Parts>    ::= family EQ StringLiteral
             | 'name' EQ StringLiteral
             | flash 'mem' EQ IntLiteral 'start' EQ <NumberLiteral>
             | sram 'mem' EQ IntLiteral 'start' EQ <NumberLiteral>
             | eeprom 'mem' EQ IntLiteral 'start' EQ <NumberLiteral>
             | mmcu EQ Identifier
             | 'device-node' EQ StringLiteral
  !           | 'ext-cache' size EQ IntLiteral 'start' EQ <NumberLiteral>
             | 'ext-cache' ref EQ <UnaryOp>
             | 'ext-sram' ref EQ <UnaryOp>
             | 'ext-nor' ref EQ <UnaryOp>
             | 'ext-nand' ref EQ <UnaryOp>
             | 'ext-flash' ref EQ <UnaryOp>
             | status EQ <StatusOptions>
             
<StatusOptions> ::= <StatusOption>
                 | <StatusOption> <StatusOptions>
                 
<StatusOption>  ::= active | inactive | disabled | sleeping
             
<Unary Op>  ::= <Reference Identifier>
             | <Dereference Identifier>
             
<Reference Identifier>  ::= '&' Identifier
                         
<Dereference Identifier>    ::= '*' Identifier
             

