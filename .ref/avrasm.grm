"Name"     = 'AVR ASM'
"Author"   = 'B. Gian James'
"Version"  = '0.1'
"About"    = 'The intel-based assembly syntax used by the Atmel avrasm2'
"Case Sensitive" = false

"Start Symbol" = <Start>

! ------------------------------------------------- Sets

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["]
{Quote}        = ['']
!{HEX Head}  =  ['0x'] | [$]
{HEX Char}     = {Digit} + [ABCDEFabcdef]
!{BIN Head}      = ['0b']
{BIN Char}      = [01]
!{Directive Head} = ['.']
{Register Head}  = [rR]
! ------------------------------------------------- Terminals

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

!Comment Block @= { Nesting = All, Advance = Character }
Comment Start = '/*'
Comment End   = '*/'
Comment Line  = ';'

Identifier    = {ID Head}{ID Tail}*
Label         = {ID Head}{ID Tail}* ':'
Literal = '-' ? {Digit}+
        | ('0x' | '$') {HEX Char}+
        | '0b' {BIN Char}+
        | '@' {Digit}+
        | '-' ? {Digit}* '.' {Digit}+
        | '"' {String Chars}* '"'
!Directive     = '.' {Letter}+
FuncLiteral     = 'low'|'high'|'byte'|'byte2'|'byte3'|'byte4'
                 |'lwrd'|'hwrd'|'page'|'log2'|'log10'|'log'
                 |'pow'


!MacroParam = '@' {Digit}*
!HexNum        = ('0x'|'$'){HEX Char}+
!BinNum        = '0b' {BIN Char}+
!IntNum        = '-' ? {Digit}+
!FloatNum      = '-' ? {Digit}* '.' {Digit}+
!StringLiteral = '"' {String Chars}* '"'
Register       = {Register Head}{Digit}+ | 'x' | 'y' | 'z' | 'x+' | 'y+' | 'z+' | '-x' | '-z' | '-y'

! ------------------------------------------------- Rules

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl> ::= NewLine <nl>  !One or more
         |  NewLine

<nl Opt> ::= NewLine <nl Opt> !Zero or more
 |  !Empty

! <nl opt> removes blank lines before first statement

<Start>   ::= <nl opt> <Program>

<Program> ::= <Statements>

<Statements> ::= <Statement> <Statements>

<Statement> ::= <Directive>
        | <Instruction>

<Directive> ::= Label '.byte' <Expression>
        | '.cseg'
        | Label '.db' <ExpressionList>
        | Label '.dw' <ExpressionList>
        | '.def' Identifier '=' Register
        | '.dseg'
        | '.endmacro'
        | '.equ' Identifier '=' <Expression>
        | '.set' Identifier '=' <Expression>
        | '.eseg'
        | '.exit'
        | '.list'
        | '.nolist'
        | '.listmac'
        | '.macro' Identifier
        | '.org' <Expression>

<ExpressionList>    ::= <ExpressionList> ',' <ExprListElem>
        | <ExprListElem>

<ExprListElem>  ::= Literal | Identifier


<Instruction>   ::= <Opcode>
        | <Opcode> <Operand>
        | <Opcode> <Operand> ',' <Operand>

<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '<>' <Add Exp>    !Not equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Operand> 
               |  <Operand> 

!Add more values to the rule below - as needed

<Operand>       ::= Identifier
         | Label
         | Literal
         | Register
         | <Function>
         |  '(' <Expression> ')'

<Function>  ::= low '(' <Expression> ')'
        | high '(' <Expression> ')'
        | byte2 '(' <Expression> ')'
        | byte3 '(' <Expression> ')'
        | byte4 '(' <Expression> ')'
        | lwrd '(' <Expression> ')'
        | hwrd '(' <Expression> ')'
        | page '(' <Expression> ')'
        | exp2 '(' <Expression> ')'
        | log2 '(' <Expression> ')'


