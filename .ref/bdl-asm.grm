"Name"     = 'BADASS'
"Author"   = 'B. Gian James'
"Version"  = '1.4'
"About"    = 'An assembly-like low-level language for BattleDroids!'

"Start Symbol" = Program
"Case Sensitive" = False

! ------------------------------------------------- Sets

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_] + [@] + [#]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]
{Binary Content} = [01]
{Hex Content} = [ABCDEFabcdef] + {Number}
{Register Head} = [rR%]

! ------------------------------------------------- Terminals

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NL       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'

BinaryLiteral   = '0b' + {Binary Content}+
HexLiteral  = ('0x'|'$') {Hex Content}+
IntLiteral      = ['-'] {Number}* ['.' {Number}*]

!Register   = {Register Head} + {Number}+
! ------------------------------------------------- Rules

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl> ::= NL <nl>  !One or more
         |  NL

<nl Opt> ::= NL <nl Opt> !Zero or more
    |  !Empty

! <nl opt> removes blank lines before first statement

!<Start>   ::= <nl opt> <Program>

<Program>   
::= <Statements>

<Statements>     
::= <ASM Statement> <Statements>
        |

<ASM Statement>    
::= NOP <nl>
 | <ADD Instruction><nl>
 | <AND Instruction><nl> 
 | <NOT Instruction><nl>
 | <LD Instruction><nl> 
 | <ST Instruction><nl>
 | <LEA Instruction><nl>
 | <BR Instruction><nl>
 | <JSR Instruction><nl>
 | <JMP Instruction><nl>
 | RET <nl>
 | <IRQ Instruction><nl>
             
<NOP Instruction> ::= NOP
                   
<ADD Instruction> 
::= ADD <R2R>
 | ADD <NUM2R>
 | ADD <MEM2R>
 | ADD <R2MEM>
                   
<AND Instruction>
::= AND <MEM2R>
 | AND <R2R>
 | AND <R2MEM>
 | AND <NUM2R>
 | AND <NUM2MEM>
 
<BR Instruction>
::= BRN Identifier
 | BRZ Identifier
 | BRP Identifier
 
<IRQ Instruction>
::= IRQ <Value>

<JMP Instruction>
::= JMP Identifier
 | JMP <MEMS>
 | JMP <Register16>
 
<JSR Instruction>
::= JSR <Value>
 
<LD Instruction>
::= LD <R2R>
 | LDI <MEM2R>
 | LDR <NUM2R>

<LEA Instruction>
::= LEA <Register16>
 | LEA <Memory16>
 
<ST Instruction>
::= ST <MEM2R>
 | STI <MEM2R>
 | STR <NUM2R>

<NOT Instruction>
::= | NOT <REGS>

<R2R>
::= <Register8> ',' <Register8>
 | <Register16> ',' <Register16>
 
<NUM2R>
::= <Register8> ',' <Numeric>
 | <Register16> ',' <Numeric>
 
<MEM2R>
::= <Register8> ',' <Memory8>
 | <Register16> ',' <Memory16>
 
<NUM2MEM>
::= <Memory8> ',' <Numeric>
 | <Memory16> ',' <Numeric>
 
<R2MEM>
::= <Memory8> ',' <Register8>
 | <Memory16> ',' <Register16>
 
<REGS>
::= <Register8> | <Register16>
 
<MEMS>
::= <Memory8> | <Memory16>

<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '!=' <Add Exp>    !Not equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 

!Add more values to the rule below - as needed

<Value>       ::= Identifier 
         | <Numeric>
         | <Register8> | <Register16>
               |  '(' <Expression> ')'


<Numeric>   ::= IntLiteral | BinaryLiteral | HexLiteral
             
<Register8> ::= R0 | R1 | R2 | R3 | R4 | R5 | R6 | R7
            
<Register16> ::= R1 ':' R0
              | R3 ':' R2
              | R5 ':' R4
              | R7 ':' R6
              | SP | SI | DI | BP | IR | PC
            
<SREG>
::= C | DS | ES | Z | P | SS | I | T

<Memory8>
::= 'BYTE' 'PTR' <MEM ADDR>
 
<Memory16>
::= 'WORD' 'PTR' <MEM ADDR>
 
<MEM ADDR>
::= '[' <SIB> ']'
| '[' <SREG> ':' <SIB> ']'

<SIB>
::= <REG OR NUM>
 | <REG OR NUM> '+' <REG OR NUM>
 | <REG OR NUM> '*' <REG OR NUM>
 | <REG OR NUM> '*' <REG OR NUM> '+' <REG OR NUM>
 | Identifier
 
<REG OR NUM>
::= <Numeric>
| <Register16>
| <Register8>
