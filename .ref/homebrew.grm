"Name"     = 'Enter the name of the grammar'
"Author"   = 'Enter your name'
"Version"  = 'The version of the grammar and/or language'
"About"    = 'A short description of the grammar'

"Start Symbol" = Program
"Case Sensitive" = False               

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{ID Head}      = {Letter} + [_] + [@] + [$] + [#]
{ID Tail}      = {Alphanumeric} + [_]
{String Chars} = {Printable} + {HT} - ["\]
{Binary Chars} = [01]
{Hex Chars}    = {Number} + [abcdef]           

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {ID Head}{ID Tail}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'
HexLiteral    = 0[xX]{Hex Chars}+
BinLiteral    = 0[bB]{Binary Chars}+  
DecimalLiteral = {Number}+                                         

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.
<ACCUMULATOR32> ::= EAX
                 
<BASE32> ::= EBX
          
<COUNTER32> ::= ECX
             
<DATA32> ::= EDX
 
<R32> ::= <ACCUMULATOR32> | <BASE32> | <COUNTER32> | <DATA32>
       | ESI | EDI | ESP | EBP
       
<R2R> ::= <R32> ',' <R32>
       
<NUM2R> ::= <R32> ',' <Numeric>

<NUM2MEM> ::= <M32> ',' <Numeric>
                    
<MEM2R> ::= <R32> ',' <M32>
         
<R2MEM> ::= <M32> ',' <R32>
         
!<REGS> ::= <R32>

<M8> ::= 'BYTE' 'PTR' <Memory Address>
      
<M32> ::= 'DWORD' 'PTR' <Memory Address>
       
<Memory Address> ::= '[' <SIB> ']'
                  | '[' <SREG> ':' <SIB> ']'

<SREG> ::= 'SREG'
                          
<SIB> ::= <REG OR LIT>
       | <REG OR LIT> '+' <REG OR LIT>
       | <REG OR LIT> '*' <REG OR LIT>
       | <REG OR LIT> '*' <REG OR LIT> '+' <REG OR LIT>
       
<REG OR LIT> ::= <Numeric>
              | <R32>
                  
<nl> ::= NewLine <nl> !One or more
        |  NewLine

<nl Opt> ::= NewLine <nl Opt> !Zero or more
           |  !Empty

! <nl opt> removes blank lines before first statement

!<Start>   ::= <nl opt> <Program>

<Program> ::= <Statements>
           
<Statements> ::= <ASM Statement> <Statements>
              |
              
<ASM Statement> ::=    <MOV Statement><nl>
              | <ADD Statement><nl>
              | <AND Statement><nl>
              | <NEG Statement><nl>       
              
<MOV Statement> ::= MOV <R2R>
                 | MOV <NUM2R>
                 | MOV <MEM2R>
                 | MOV <R2MEM>
                 
<ADD Statement> ::= ADD <R2R>
                 | ADD <NUM2R>
                 | ADD <MEM2R>
                 | ADD <R2MEM>
                 
<AND Statement> ::= AND <R2R>
                 | AND <NUM2R>
                 | AND <MEM2R>
                 | AND <R2MEM>
                 | AND <NUM2MEM>
                 
<NEG Statement> ::= NEG <R32>      

<Expression>  ::= <Expression> '>'  <Add Exp> 
               |  <Expression> '<'  <Add Exp> 
               |  <Expression> '<=' <Add Exp> 
               |  <Expression> '>=' <Add Exp>
               |  <Expression> '==' <Add Exp>    !Equal
               |  <Expression> '<>' <Add Exp>    !Not equal
               |  <Add Exp> 

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
               |  <Add Exp> '-' <Mult Exp>
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 

!Add more values to the rule below - as needed

<Value>       ::= Identifier
               |  '(' <Expression> ')'
               
<Label> ::= Identifier ':'

<Numeric> ::= HexLiteral | BinLiteral | DecimalLiteral





         
